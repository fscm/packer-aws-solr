#!/bin/bash
#
# Shell script to configure some options of Solr.
#
# Copyright 2016-2019, Frederico Martins
#   Author: Frederico Martins <http://github.com/fscm>
#
# SPDX-License-Identifier: MIT
#
# This program is free software. You can use it and/or modify it under the
# terms of the MIT License.
#

set -e

BASEDIR=$(dirname $0)
BASENAME=$(basename $0)
__TS__=$(date +%Y%m%d%H%M%S)

# Configuration files
SOLR_INCLUDE="/srv/solr/bin/solr.in.sh"

# Variables
SOLR_DISABLE=0
SOLR_ENABLE=0
SOLR_START=0
SOLR_WAIT=0

SOLR_ADDRESS=
SOLR_HEAP_SIZE=

__TMP_ZOOKEEPER_NODES__=()

# Usage
function show_usage() {
  echo "Usage: ${BASENAME} [options]"
  echo "  options:"
  echo "    -a <ADDRESS>   Sets the Solr node address exposed to the cluster (default"
  echo "                   value is 'localhost')."
  echo "    -D             Disables the Solr service from start at boot time."
  echo "    -E             Enables the Solr service to start at boot time."
  echo "    -m <MEMORY>    Sets Solr heap size. Values should be provided following"
  echo "                   the same Java heap nomenclature."
  echo "    -S             Starts the Solr service after performing the required"
  echo "                   configurations (if any given)."
  echo "    -W <SECONDS>   Waits the specified amount of seconds before starting the"
  echo "                   Solr service (default value is '0')."
  echo "    -z <ENDPOINT>  Sets a Zookeeper server endpoint to be used by the Solr"
  echo "                   node (default value is 'localhost:2181')."
}

# Options parsing
while getopts ":a:DEm:SW:z:" opt; do
  case $opt in
    a)
      SOLR_ADDRESS=${OPTARG}
      ;;
    D)
      SOLR_DISABLE=1
      ;;
    E)
      SOLR_ENABLE=1
      ;;
    m)
      SOLR_HEAP_SIZE=${OPTARG}
      ;;
    S)
      SOLR_START=1
      ;;
    W)
      SOLR_WAIT=${OPTARG}
      ;;
    z)
      __TMP_ZOOKEEPER_NODES__+=("${OPTARG}")
      ;;
    \?)
      echo >&2 "  [ERROR] Invalid option: -${OPTARG}"
      exit 1
      ;;
    :)
      echo >&2 "  [ERROR] Option -${OPTARG} requires an argument"
      exit 2
      ;;
  esac
done

# Check arguments
if [[ $# -eq 0 ]]; then
  show_usage
  exit 3
fi

# Check permissions
if [[ $EUID -ne 0 ]]; then
  echo >&2 "  [ERROR] This script requires privileged access to system files"
  exit 4
fi

# Check requirements
if [[ "${SOLR_ENABLE}" -gt 0 ]] && [[ "${SOLR_DISABLE}" -gt 0 ]]; then
  echo >&2 "  [ERROR] Enable (-E) and Disable (-D) options can not be used together."
  exit 5
fi

# Backup configuration files
if [[ -f ${SOLR_INCLUDE} ]]; then
  cp ${SOLR_INCLUDE} ${SOLR_INCLUDE}.${__TS__}.bck
fi

# Configure node exposed address
if ! [[ "x${SOLR_ADDRESS}" = "x" ]]; then
  sed -i -r -e "s/# *SOLR_HOST/SOLR_HOST/;/^SOLR_HOST/s/=.*/=\"${SOLR_ADDRESS}\"/" ${SOLR_INCLUDE}
fi

# Configure memory settings
if ! [[ "x${SOLR_HEAP_SIZE}" = "x" ]]; then
  sed -i -r -e "s/# *SOLR_HEAP/SOLR_HEAP/;/^SOLR_HEAP/s/=.*/=\"${SOLR_HEAP_SIZE}\"/" ${SOLR_INCLUDE}
fi

# Configure zookeeper nodes
if [[ "${#__TMP_ZOOKEEPER_NODES__[@]}" -gt 0 ]]; then
  ZOOKEEPER_NODES=()
  for node in ${__TMP_ZOOKEEPER_NODES__[@]//,/ }; do
    if [[ "${node}" =~ ^([0-9a-zA-Z\.\-]+)(:([0-9]+))?$ ]]; then
      ZOOKEEPER_PORT=("${BASH_REMATCH[3]}")
      ZOOKEEPER_NODES+=("${BASH_REMATCH[1]}:${ZOOKEEPER_PORT:-2181}")
    else
      echo "  [WARN] Invalid node address (${node})."
    fi
  done
  if [[ "${#ZOOKEEPER_NODES[@]}" -gt 0 ]]; then
    NODES="${ZOOKEEPER_NODES[@]}"
    sed -i -r -e "s/# *ZK_HOST=/ZK_HOST=/;/^ZK_HOST=/s/=.*/=\"${NODES// /,}\"/" ${SOLR_INCLUDE}
  fi
fi

# Enable the service
[[ "${SOLR_ENABLE}" -gt 0 ]] && systemctl enable solr.service

# Disable the service
[[ "${SOLR_DISABLE}" -gt 0 ]] && systemctl disable solr.service

# Start the service
if [[ "${SOLR_START}" -gt 0 ]]; then
  echo "  [INFO] Solr will start in ${SOLR_WAIT} second(s)..."
  nohup sh -c "sleep ${SOLR_WAIT} ; systemctl start solr.service" &> /dev/null &
fi

# Clean up unneeded backups
diff -q ${SOLR_INCLUDE} ${SOLR_INCLUDE}.${__TS__}.bck &> /dev/null && rm -f ${SOLR_INCLUDE}.${__TS__}.bck || true

# All done
echo "  [INFO] Configuration(s) successfully updated"
exit 0
